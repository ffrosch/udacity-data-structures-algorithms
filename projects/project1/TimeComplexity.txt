# Task0

get record1 by index (1)
return record (1)
get record2 by index (1)
return record (1)
print record1 (1)
print record2 (1)

N = 6
N = 6 + 0n
Big O: O(1)


# Task1

combine calls and texts (1)

2x
set of numbers (1)
for row in data (1n)
get by index (1n)
add to set (1n)
return set (1)

union set a and set b (len(a) + len(b))
return union (1)

print result (1)

N = 1 + 2 + 2n + 2n + 2n + 2 + len(a) + len(b) + 1 + 1
N = 6n + len(a) + len(b) + 7
Big O: O(n)


# Task2

create dict (1)
for call in calls (n)
numbers (n)
time (n)
for number in numbers (n*2)
if number (n*2)
add time (n*2)
return time (1)

max time (1)
max number (1)
for number, time (n)
if time (n)
max time (n)
max number (n)
return result (1)

N = 1 + n + n + n + 2n + 2n + 2n + 1 + 1 + 1 + n + n + n + n + 1
N = 13n + 5
Big O: O(n)


# Task3

## calls_from_area
if prefix (1)
raise (1)
create list (1)
for call (n)
if call (n)
list append(n)
return result (1)

N = 3n + 4

## areas_called
create set (1)
for call (n)
index call (1)
index number (1)
create variable (1)
if (n)
add (n)
add to set (n)
sort result (n log n)
return result (1)

N = n logn + 4n + 5

## calls_to_area_ratio
if prefix (1)
raise (1)
num calls (3n + 4) + (n)
num area_calls (4n + 5) + (2n)
return result (1)

N = n logn + 10n + 12

Big O: O(n logn)


# Task4

## unique_numbers
create set (1)
for row (n)
add to set (n)
return (1)

N = 2n + 2

## only_calling
calling (2n + 2)
receiving (2n + 2)
set difference (len(a))
return result (1)

N = 4n + len(a) + 5

## using_texts
sending (2n + 2)
receiving (2n + 2)
set union (len(a) + len(b))
return result (1)

N = 4n + len(a) + len(b) + 5

## possible_telemarketers
only_calling (4n + len(a) + 5)
using_texts (4n + len(b) + len(c) + 5)
set difference (len(d))
iterate over list (n)
sort result (n logn)
return result (1)

N = n logn + 9n + 4len(x) + 11
Big O: O(n logn)